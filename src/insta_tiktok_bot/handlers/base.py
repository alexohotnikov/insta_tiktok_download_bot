"""
Base handlers module for the bot.
"""
import logging
import os
import re
from aiogram import Router, F
from aiogram.types import Message, FSInputFile, InputMediaPhoto
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from ..utils.downloader import InstagramDownloader, TikTokDownloader
from ..config import load_config
from typing import Optional, List

load_dotenv()

config = load_config()
router = Router()

class DownloadState(StatesGroup):
    waiting_for_url = State()

class SecurityState(StatesGroup):
    waiting_for_answer = State()

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL
INSTAGRAM_REELS_PATTERN = r'https?://(?:www\.)?instagram\.com/(?:reel/|reels/)[\w-]+/?'
TIKTOK_PATTERN = r'https?://(?:www\.)?(?:tiktok\.com/@[\w-]+/video/\d+|vt\.tiktok\.com/[\w-]+/?)/?'
INSTAGRAM_POST_PATTERN = r'https?://(?:www\.)?instagram\.com/p/[\w-]+/?'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä InstagramDownloader
try:
    instagram_downloader = InstagramDownloader("cookies.txt")
except FileNotFoundError as e:
    logging.error(f"Failed to initialize InstagramDownloader: {e}")
    instagram_downloader = None

async def handle_url(message: Message, url: str) -> Optional[List[dict]]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL
        if re.match(r'https?://(?:www\.)?instagram\.com/(?:reel|reels)/[\w-]+/?', url):
            if not instagram_downloader:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫ Instagram")
                return None
            video_path = instagram_downloader.download_reel(url, message.from_user.id)
            return [{'type': 'video', 'path': video_path}] if video_path else None
        elif re.match(r'https?://(?:www\.)?instagram\.com/p/[\w-]+/?', url):
            if not instagram_downloader:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫ Instagram")
                return None
            # Use download_post_with_instaloader for specific post download
            post_data = instagram_downloader.download_post_with_instaloader(url, message.from_user.id)
            if post_data:
                return [{'type': 'post', 'path': post_data['path'], 'caption': post_data.get('caption')}]
            return None
        elif re.match(TIKTOK_PATTERN, url):
            video_path = TikTokDownloader.download_video(url, message.from_user.id)
            return [{'type': 'video', 'path': video_path}] if video_path else None
        else:
            await message.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL")
            return None
    except Exception as e:
        logging.error(f"Error handling URL: {str(e)}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {str(e)}")
        return None

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # Check if user has already passed the security check
    user_data = await state.get_data()
    if user_data.get('passed_security_check', False):
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å: –ö–∞–∫–æ–π –Ω–æ–º–µ—Ä –¥–æ–º–∞?")
    await state.set_state(SecurityState.waiting_for_answer)

@router.message(SecurityState.waiting_for_answer)
async def process_answer(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    answer = message.text.strip().lower()  # Convert answer to lowercase
    if answer == "2–≤":  # Compare with lowercase correct answer
        await state.update_data(passed_security_check=True)
        await message.answer("–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
        # Do not clear the state completely, just reset the current state
        await state.set_state(None)
    else:
        await message.answer("–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram –∏–ª–∏ TikTok\n"
        "2. –Ø —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ç–µ–±–µ\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "- Instagram Reels\n"
        "- TikTok –≤–∏–¥–µ–æ"
    )

@router.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # Check if user has passed the security check
    user_data = await state.get_data()
    if not user_data.get('passed_security_check', False):
        await message.answer("–í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.\n–í–≤–µ–¥–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å")
        return

    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL
    if not (re.match(INSTAGRAM_REELS_PATTERN, url) or re.match(TIKTOK_PATTERN, url) or re.match(INSTAGRAM_POST_PATTERN, url)):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram Reels –∏–ª–∏ TikTok")
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL
        await message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –º–æ–ª–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        loading_msg = await message.answer("‚ö°Ô∏è")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        download_results = await handle_url(message, url)
        if not download_results:
            return
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏
            for result in download_results:
                if result['type'] == 'video':
                    video_path = result['path']
                    # Ensure the video file exists before sending
                    if not os.path.exists(video_path):
                        logging.error(f"Video file does not exist: {video_path}")
                        await message.answer("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        continue

                    try:
                        # Send video with caption
                        video = FSInputFile(video_path)
                        platform = "Insta" if "instagram.com" in url else "–¢–∏–∫–¢–æ–∫"
                        caption = f"üé¨ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!\n\n<a href='{url}'>üîó –û—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞ {platform}</a>"
                        await message.answer_video(video, caption=caption, parse_mode="HTML")
                    except Exception as e:
                        logging.error(f"Error sending video: {str(e)}")
                        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
                    
                    # Ensure the file is not in use before deleting
                    try:
                        os.remove(video_path)
                    except Exception as e:
                        logging.error(f"Error deleting video file: {str(e)}")
                        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: {str(e)}")
                elif result['type'] == 'post':
                    post_path = result['path']
                    post_caption = result.get('caption')
                    # Collect all photo paths
                    photo_paths = []
                    for root, _, files in os.walk(post_path):
                        for file in files:
                            file_path = os.path.join(root, file)
                            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
                                photo_paths.append(file_path)

                    # Create media group
                    media_group = []
                    for i, photo_path in enumerate(photo_paths):
                        try:
                            # Verify file existence and log file size
                            if not os.path.exists(photo_path):
                                logging.error(f"File does not exist: {photo_path}")
                                await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {photo_path}")
                                continue

                            file_size = os.path.getsize(photo_path)
                            logging.info(f"File size: {file_size} bytes")

                            # Check if file size exceeds Telegram's limit
                            if file_size > 20 * 1024 * 1024:  # 20 MB limit
                                logging.error(f"File size exceeds limit: {photo_path}")
                                await message.answer(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {photo_path}")
                                continue

                            logging.info(f"Adding file to media group: {photo_path}")

                            # Add to media group with caption only for the first photo
                            if i == 0 and post_caption:
                                caption = f"{post_caption}\n\n<a href='{url}'>üîó –û—Ä–∏–≥–∏–Ω–∞–ª –≤ Instagram</a>"
                                media_group.append(InputMediaPhoto(media=FSInputFile(photo_path), caption=caption, parse_mode="HTML"))
                            else:
                                media_group.append(InputMediaPhoto(media=FSInputFile(photo_path)))
                        except Exception as e:
                            logging.error(f"Error preparing photo for media group: {str(e)}")
                            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ñ–æ—Ç–æ: {str(e)}")

                    # Send media group
                    if media_group:
                        try:
                            await message.answer_media_group(media_group)
                        except Exception as e:
                            logging.error(f"Error sending media group: {str(e)}")
                            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø—ã –º–µ–¥–∏–∞: {str(e)}")
        except Exception as e:
            logging.error(f"Error processing download results: {str(e)}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            for result in download_results:
                try:
                    if result['type'] == 'post':
                        # For posts, we need to remove all files in the directory first
                        post_path = result['path']
                        if os.path.exists(post_path):
                            for root, _, files in os.walk(post_path):
                                for file in files:
                                    file_path = os.path.join(root, file)
                                    try:
                                        os.remove(file_path)
                                    except Exception as e:
                                        logging.error(f"Error deleting file {file_path}: {str(e)}")
                            # Remove the directory itself
                            try:
                                os.rmdir(post_path)
                            except Exception as e:
                                logging.error(f"Error removing directory {post_path}: {str(e)}")
                    else:
                        # For videos, just remove the file
                        if os.path.exists(result['path']):
                            os.remove(result['path'])
                except Exception as e:
                    logging.error(f"Error deleting file: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª–Ω–∏–µ–π
            try:
                await loading_msg.delete()
            except Exception as e:
                logging.error(f"Error deleting loading message: {str(e)}")
                
    except Exception as e:
        logging.error(f"Error in message handler: {str(e)}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 
"""
Base handlers module for the bot.
"""
import logging
import os
import re
from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv
from ..utils.downloader import InstagramDownloader, TikTokDownloader
from ..config import load_config
from typing import Optional

load_dotenv()

config = load_config()
router = Router()

class DownloadState(StatesGroup):
    waiting_for_url = State()

# –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è URL
INSTAGRAM_REELS_PATTERN = r'https?://(?:www\.)?instagram\.com/(?:reel/|reels/)[\w-]+/?'
TIKTOK_PATTERN = r'https?://(?:www\.)?(?:tiktok\.com/@[\w-]+/video/\d+|vt\.tiktok\.com/[\w-]+/?)/?'

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä InstagramDownloader
try:
    instagram_downloader = InstagramDownloader("cookies.txt")
except FileNotFoundError as e:
    logging.error(f"Failed to initialize InstagramDownloader: {e}")
    instagram_downloader = None

async def handle_url(message: Message, url: str) -> Optional[str]:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ URL –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø URL
        if re.match(INSTAGRAM_REELS_PATTERN, url):
            if not instagram_downloader:
                await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑—á–∏–∫ Instagram")
                return None
            return instagram_downloader.download_reel(url, message.from_user.id)
        elif re.match(TIKTOK_PATTERN, url):
            return TikTokDownloader.download_video(url, message.from_user.id)
        else:
            await message.answer("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π URL")
            return None
    except Exception as e:
        logging.error(f"Error handling URL: {str(e)}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL: {str(e)}")
        return None

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram Reels –∏–ª–∏ TikTok, "
        "–∏ —è —Å–∫–∞—á–∞—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è."
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.answer(
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram –∏–ª–∏ TikTok\n"
        "2. –Ø —Å–∫–∞—á–∞—é –≤–∏–¥–µ–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ —Ç–µ–±–µ\n\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
        "- Instagram Reels\n"
        "- TikTok –≤–∏–¥–µ–æ"
    )

@router.message(F.text)
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    url = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç URL
    if not (re.match(INSTAGRAM_REELS_PATTERN, url) or re.match(TIKTOK_PATTERN, url)):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram Reels –∏–ª–∏ TikTok")
        return
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å URL
        await message.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –º–æ–ª–Ω–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        loading_msg = await message.answer("‚ö°Ô∏è")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_path = await handle_url(message, url)
        if not video_path:
            return
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é
            video = FSInputFile(video_path)
            platform = "Insta" if "instagram.com" in url else "–¢–∏–∫–¢–æ–∫"
            caption = f"üé¨ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!\n\n<a href='{url}'>üîó –û—Ä–∏–≥–∏–Ω–∞–ª –Ω–∞ {platform}</a>"
            await message.answer_video(video, caption=caption, parse_mode="HTML")
        except Exception as e:
            logging.error(f"Error sending video: {str(e)}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        finally:
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                os.remove(video_path)
            except Exception as e:
                logging.error(f"Error deleting video file: {str(e)}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–æ–ª–Ω–∏–µ–π
            try:
                await loading_msg.delete()
            except Exception as e:
                logging.error(f"Error deleting loading message: {str(e)}")
                
    except Exception as e:
        logging.error(f"Error in message handler: {str(e)}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}") 